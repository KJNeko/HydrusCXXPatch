name: Release

on:
  push:
    tags:
      - 'v*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-ubuntu:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: compress
      run: tar -czvf Ubuntu-Patch.tar.gz -c ${{github.workspace}}/build

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Ubuntu-Patch
        path: Ubuntu-Patch.tar.gz
      

  build-windows:
    runs-on: [windows-latest]
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "MinGW Makefiles"

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Compress
      run: |
        cd .\build
        7z.exe a -tzip -mx=5 ..\Windows-Patch.zip ${{github.workspace}}/build
        cd ..

    - name: Upload A Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Windows-Patch
        path: dist\Windows-Patch.zip

  create-release:
    name: Create release Entry
    runs-on: ubuntu-latest
    needs: [build-windows, build-ubuntu]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Get All Artifacts
      uses: actions/download-artifact@v2

    - name: Rename Files
      run: |
        mkdir ubuntu windows
        mv Windows-Patch/Windows-Patch.zip Hydrus.Patch.${{steps.meta.outputs.version_short}}.-.Windows.-.Patch.zip
        mv Ubuntu-Patch/Ubuntu-Patch.tar.gz Hydrus.Patch.${{steps.meta.outputs.version_short}}.-.Linux.-.Patch.tar.gz

    - name: Release new
      uses: softprops/action-hg-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          Hydrus.Patch.${{steps.meta.outputs.version_short}}.-.Windows.-.Patch.zip
          Hydrus.Patch.${{steps.meta.outputs.version_short}}.-.Linux.-.Patch.tar.gz

    env:
      GITHUB_TOKEN: ${{secrets.GETHUB_TOKEN}}
